debugger;

let rootPortfolios = [];

let rootPrograms = [];

let allPortfolios = [];

let allPrograms = [];

let portfolios = {};

let programs = {};

let pfmEntities = [];

debugger;

data.forEach(function(d) {
  var entityId = d[0];
  var name = d[1];
  var parentPortfolioId = d[2];
  var entityType = d[3];
  var parentType = d[4];
  
  //Each record is reprented by the following fields
  var node = {"name": name, "value": entityId, "parentPortfolioId" : parentPortfolioId, "children": [], "entityType": entityType, "parentType": parentType};

  //If the record is a portfolio
  if ("PORTFOLIO" === entityType ) {
    portfolios['' + entityId] = node;
    allPortfolios.push(node);
    node.isPortfolio = true;

    if (parentPortfolioId === null || parentPortfolioId === "" || parentPortfolioId === " " ) {
      rootPortfolios.push(node);
    }

  } 
  //If the record is a Program
  else if ("PROGRAM" === entityType)
  {
     programs['' + entityId] = node;
     allPrograms.push(node);
     node.isPortfolio = true;
    //If the record is a stand-alone (root) Program
     if (parentPortfolioId === null || parentPortfolioId === "" || parentPortfolioId === " " ) {
        rootPrograms.push(node);
    }
  }
  //If the record is not a Program or Portfolio.
  else {
    node.isPortfolio = false;
    pfmEntities.push(node);
  }
});

// Now filling entities in porfolios
pfmEntities.forEach(function (pfmEntity) {
  if ("PORTFOLIO" === pfmEntity.parentType) {
  	portfolios[''+pfmEntity['parentPortfolioId']].children.push(pfmEntity);
  }
   if ("PROGRAM" === pfmEntity.parentType) {
  	programs[''+pfmEntity['parentPortfolioId']].children.push(pfmEntity);
  }
});

// Building portfolio Hierarchy

var currentPortfolios = rootPortfolios;

while (currentPortfolios.length > 0) {
  var nextPortfolios = [];
  currentPortfolios.forEach(function (currentPf) {
    var pfmId = currentPf.value;

    allPortfolios.forEach(function (pf) {
      if (pf.parentPortfolioId == pfmId) {
          currentPf['children'].push(pf);
          nextPortfolios.push(pf);
      }
    });
    
     allPrograms.forEach(function (pro) {
      if (pro.parentPortfolioId == pfmId) {
          currentPf['children'].push(pro);
          nextPortfolios.push(pro);
      }
    });
    
  });
  currentPortfolios = nextPortfolios;
}

if (rootPrograms.length > 0) {
	rootPrograms.forEach(function (currentPro) {
      rootPortfolios.push(currentPro);
});

}

let graphData = {
  "name": "Inc.",
  "children": rootPortfolios 
}

console.log(graphData);



let width = 932;
let radius = width / 8;
let color = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, graphData.children.length + 1));
let format = d3.format(",d");
let arc = d3.arc()
    .startAngle(d => d.x0)
    .endAngle(d => d.x1)
    .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))
    .padRadius(radius * 1.5)
    .innerRadius(d => d.y0 * radius)
    .outerRadius(d => Math.max(d.y0 * radius, d.y1 * radius - 1));

let partition = data => {
  const root = d3.hierarchy(data)
      .sum(d => d.value)
      .sort((a, b) => b.value - a.value);
 return d3.partition()
     .size([2 * Math.PI, root.height + 1])
   (root);

}
  const root = partition(graphData);
  root.each(d => d.current = d);

  const svg = d3.select(container).append("svg")
      .attr("viewBox", [0, 0, width, width])
      .style("font", "10px sans-serif");

  const g = svg.append("g")
      .attr("transform", `translate(${width / 2},${width / 2})`);

  const path = g.append("g")
    .selectAll("path")
    .data(root.descendants().slice(1))
    .join("path")
      .attr("fill", d => { while (d.depth > 5) d = d.parent; return color(d.data.entityType); })
      .attr("fill-opacity", d => arcVisible(d.current) ? (d.children ? 0.6 : 0.4) : 0)
      .attr("d", d => arc(d.current));

  path.filter(d => d.children)
      .style("cursor", "pointer")
      .on("click", clicked);

  path.append("title")
      .text(d => `${d.ancestors().map(d => d.data.name).reverse().join("/")}\n${format(d.value)}\n${d.data.entityType}`);

  const label = g.append("g")
      .attr("pointer-events", "none")
      .attr("text-anchor", "middle")
      .style("user-select", "none")
    .selectAll("text")
    .data(root.descendants().slice(1))
    .join("text")
      .attr("dy", "0.35em")
      .attr("fill-opacity", d => +labelVisible(d.current))
      .attr("transform", d => labelTransform(d.current))
      .text(d => d.data.name );

//percentage text
  const percentage_text=svg.append("text")
      .attr("id","title")
      .attr("x", (width / 2))             
        .attr("y", (width / 2))
        .attr("text-anchor", "middle")  
        .style("font-size", "2.5em");
  
  const parent = g.append("circle")
      .datum(root)
      .attr("r", radius)
      .attr("fill", "none")
      .attr("pointer-events", "all")
      .on("click", clicked);

  function clicked(p) {
    parent.datum(p.parent || root);

    root.each(d => d.target = {
      x0: Math.max(0, Math.min(1, (d.x0 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,
      x1: Math.max(0, Math.min(1, (d.x1 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,
      y0: Math.max(0, d.y0 - p.depth),
      y1: Math.max(0, d.y1 - p.depth)
    });

    const t = g.transition().duration(750);

    // Transition the data on all arcs, even the ones that aren’t visible,
    // so that if this transition is interrupted, entering arcs will start
    // the next transition from the desired position.
    path.transition(t)
        .tween("data", d => {
          const i = d3.interpolate(d.current, d.target);
          return t => d.current = i(t);
        })
      .filter(function(d) {
        return +this.getAttribute("fill-opacity") || arcVisible(d.target);
      })
        .attr("fill-opacity", d => arcVisible(d.target) ? (d.children ? 0.6 : 0.4) : 0)
        .attrTween("d", d => () => arc(d.current));

    label.filter(function(d) {
        return +this.getAttribute("fill-opacity") || labelVisible(d.target);
      }).transition(t)
        .attr("fill-opacity", d => +labelVisible(d.target))
        .attrTween("transform", d => () => labelTransform(d.current));
    if (p.current === null)
    {
      	percentage_text.text("");
    	
    }
    else
    {
        percentage_text.text(p.data.name);
    }
  }
  
  function arcVisible(d) {
    return d.y1 <= 3 && d.y0 >= 1 && d.x1 > d.x0;
  }

  function labelVisible(d) {
    return d.y1 <= 3 && d.y0 >= 1 && (d.y1 - d.y0) * (d.x1 - d.x0) > 0.03;
  }

  function labelTransform(d) {
    const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;
    const y = (d.y0 + d.y1) / 2 * radius;
    return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;
  }